var gameLogic;!function(a){function b(){a.bunnyPosition.line=1,a.bunnyPosition.column=4,a.dogPosition[0].line=0,a.dogPosition[0].column=0,a.dogPosition[1].line=1,a.dogPosition[1].column=0,a.dogPosition[2].line=2,a.dogPosition[2].column=0}function c(){this.turnsTake++}function d(){return b(),[["D1","",""],["D2","","","","B"],["D3","",""]]}function e(a){return"B"==a[1][4]&&"D"==a[0][2].charAt(0)&&"D"==a[1][3].charAt(0)&&"D"==a[2][2].charAt(0)||"B"==a[0][1]&&"D"==a[0][0].charAt(0)&&"D"==a[1][2].charAt(0)&&"D"==a[0][2].charAt(0)||"B"==a[2][1]&&"D"==a[2][0].charAt(0)&&"D"==a[1][2].charAt(0)&&"D"==a[2][2].charAt(0)?!0:!1}function f(a){for(var b=0;b<a.length;b++)for(var c=0;c<a[b].length;c++)if("B"===a[b][c])return{row:b,col:c}}function g(a){for(var b=[{row:void 0,col:void 0},{row:void 0,col:void 0},{row:void 0,col:void 0}],c=0;c<a.length;c++)for(var d=0;d<a[c].length;d++)"D"===a[c][d].charAt(0)&&("1"===a[c][d].charAt(1)?b[0]={row:c,col:d}:"2"===a[c][d].charAt(1)?b[1]={row:c,col:d}:b[2]={row:c,col:d});return console.log("printing dog positions"),console.log(b[0]),console.log(b[1]),console.log(b[2]),b}function h(a,b){if(null==a||null==b)return!1;if(a.length!==b.length)return!1;for(var c=a.length;c--;)if(a[c]!==b[c])return!1;return!0}function i(a){for(var b=a.slice(0),c=a.length;c--;)b[c]instanceof Array&&(b[c]=i(a[c]));return b}function j(a,b){var c=a[b.row][b.col];return""!=c.charAt(0)?c:""}function k(a){return 0===a?"D":"B"}function l(b,e,f,g){var h=([e.row,e.col],[f.row,f.col]);console.log(h),b||(console.log(" creating new board"),b=d());var l=j(b,e);if(f.col<0)throw new Error("Column value cannot be lower than 0");if(f.row<0)throw new Error("Row value cannot be lower than 0");if(f.row>2)throw new Error("Row value cannot be higher than 2");if(1==f.row&&f.col>4)throw new Error("Column value is too high");if((0===f.row||2===f.row)&&f.col>2)throw new Error("Column value is too high");if(""!==b[f.row][f.col])throw new Error("One can only make a move in an empty position!");if(""!==m(b))throw new Error("Can only make a move if the game is not over!");if(""===l)throw new Error(" the original position contained no pawn");if(k(g)!==l.charAt(0))throw new Error("It is not that pawn's turn to move");if(console.log(" it's the "+k(g)+" move"),console.log("the pawn chosen is "+l.charAt(0)),"B"===k(g)){console.log("nomizei oti paizei o lagos");for(var n=!1,o=0;o<a.legalMovesBunny[e.row][e.col].length;o++)angular.equals(h,a.legalMovesBunny[e.row][e.col][o])&&(n=!0);if(!n)throw new Error("Cannot move there bunny!")}else{var p;1===+l.charAt(1)?p=0:2===+l.charAt(1)?p=1:3===+l.charAt(1)&&(p=2);for(var q=!1,o=0;o<a.legalMovesDog[e.row][e.col].length;o++)console.log(a.legalMovesDog[e.row][e.col][o]),angular.equals(h,a.legalMovesDog[e.row][e.col][o])&&(console.log("tairiakse me kapoio"),q=!0);if(!q)throw new Error("Cannot move there dog!")}var r=i(b);"B"===k(g)?(r[e.row][e.col]="",r[f.row][f.col]="B"):(r[e.row][e.col]="",r[f.row][f.col]="D"+l.charAt(1)),c();var s,t=m(r);""!==t?(console.log("someone won"),s={endMatch:{endMatchScores:"D"===t?[1,0]:"B"===t?[0,1]:[0,0]}}):s={setTurn:{turnIndex:1-g}};({row:f.row,col:f.col});return[s,{set:{key:"board",value:r}},{set:{key:"deltaFrom",value:{row:e.row,col:e.col}}},{set:{key:"deltaTo",value:{row:f.row,col:f.col}}}]}function m(b){var c,d=[void 0,void 0,void 0],h=f(b),i=g(b);c=1===h.row?h.col-1:h.col;for(var j=0;j<i.length;j++)d[j]=1===i[j].row?i[j].col-1:i[j].col;return c<=d[0]&&c<=d[1]&&c<=d[2]?(console.log("bunny won"),"B"):20===a.turnsTake?(console.log(" more than twenty moves"),"B"):e(b)?(console.log("dog moved"),"D"):""}function n(a){var b=a.move,c=a.turnIndexBeforeMove,d=a.stateBeforeMove;try{var e=b[2].set.value;console.log("delta from is "+e.row+" "+e.col);var f=b[3].set.value;console.log("delta to is "+f.row+" "+f.col);var g=d.board,h=l(g,e,f,c);if(!angular.equals(b,h))return!1}catch(i){return!1}return!0}a.legalMovesDog=[[[[0,1],[1,1],[1,2]],[[0,2],[1,2]],[[1,3],[1,4]]],[[[0,0],[1,1],[2,0]],[[0,0],[1,2],[2,0]],[[0,1],[2,1],[0,2],[1,3],[2,2]],[[0,2],[2,2],[1,4]],[]],[[[1,1],[1,2],[2,1]],[[1,2],[2,2]],[[1,3],[1,4]]]],a.legalMovesBunny=[[[[1,0],[0,1],[1,1],[1,2]],[[0,0],[0,2],[1,2]],[[0,1],[1,2],[1,3],[1,4]]],[[],[[1,0],[0,0],[1,2],[2,0]],[[0,0],[0,1],[0,2],[1,1],[1,3],[2,0],[2,1],[2,2]],[[1,2],[0,2],[2,2],[1,4]],[[0,2],[1,3],[2,2]]],[[[1,0],[1,1],[1,2],[2,1]],[[2,0],[1,2],[2,2]],[[2,1],[1,3],[1,2],[1,4]]]],a.bunnyPosition={line:0,column:0},a.dogPosition=[{line:0,column:0},{line:0,column:0},{line:0,column:0}],a.setInitialPositions=b,a.turnsTake=0,a.incrementTurn=c,a.getInitialBoard=d,a.bunnyBlocked=e,a.getBunnyPosition=f,a.getDogPositions=g,a.arraysEqual=h,a.determinePawn=j,a.getTurn=k,a.createMove=l,a.getWinner=m,a.isMoveOk=n}(gameLogic||(gameLogic={}));var game;!function(a){function b(a,b){return"B"===x.board[a][b].charAt(0)?"rabbit":"dog"}function c(){for(var a=0;a<x.board.length;a++)for(var b=0;b<x.board[a].length;b++)console.log(x.board[a][b])}function d(b,c,d){A=document.getElementById("gameArea");var h=c-A.offsetLeft,i=d-A.offsetTop,j=Math.floor(5*h/A.clientWidth),k=Math.floor(3*i/A.clientHeight);(0===k||2===k)&&(j-=1),console.log(" you clicked on square "+k+" "+j);f();if(console.log("row and col is "+k+" "+j),"touchstart"===b&&C.row<0&&C.col<0){var l=x.board[k][j];console.log("curPiece is "+l),""!==l&&(console.log("mpike me lathos curr piece"),C={row:k,col:j},g(k,j),console.log("pawnTag is "+a.pawnTag),z=document.getElementById(a.pawnTag),console.log("to dragging piece einai "+z),z?(z.style.width="115%",z.style.height="115%",z.style.position="absolute"):console.log("wrong move again"))}C.row>-1&&C.col>-1&&("touchend"===b||"touchcancel"===b||"touchleave"===b||"mouseup"===b)&&(console.log(" got into touchend if and the type is "+b),D={row:k,col:j},console.log(" mpika sto touchend"),console.log("delta from row is "+C.row+"delta from col is "+C.col+"delta to "+D.row+" and deltato col is "+D.col),C.row!==D.row||C.col!==D.col?(console.log("mpainei mesa meta tin allagi"),""!==x.board[C.row][C.col]&&(console.log("mpainei mesa meta tin allagi 2"),e(C,D))):console.log("wrong type of move")),C.row>-1&&C.col>-1&&("touchend"===b||"touchcancel"===b||"touchleave"===b||"mouseup"===b)&&(z.style.width="100%",z.style.height="100%",z.style.position="absolute",C={row:-1,col:-1},D={row:-1,col:-1},z=null)}function e(a,b){var c="Dragged piece from "+a.row+"*"+a.col+" to "+b.row+"*"+b.col;if(log.info(c),"?throwException"===window.location.search)throw new Error("Throwing the error because URL has '?throwException'");if(u)try{o(a.row,a.col);var d=gameLogic.createMove(x.board,a,b,w.turnIndexAfterMove);u=!1,gameService.makeMove(d),log.info(["Make movement from "+a.row+"x"+a.col+" to "+b.row+"x"+b.col])}catch(e){return void log.info(e)}}function f(){var a={width:A.clientWidth/5,height:A.clientHeight/3};return a}function g(b,c){return x.board[b][c]&&""!==x.board[b][c]?(a.pawnTag=x.board[b][c].charAt(0),"D"===a.pawnTag&&(a.pawnTag=x.board[b][c].charAt(1)),!0):!1}function h(a){return 1===a?[0,1,2,3,4]:[0,1,2]}function i(a,b){return 1===a?b:b+1}function j(){console.log("Translation of 'RULES_OF_HARE_AND_HOUNDS' is "+translate("RULES_OF_HARE_AND_HOUNDS")),resizeGameAreaService.setWidthToHeight(1),gameService.setGame({minNumberOfPlayers:2,maxNumberOfPlayers:2,isMoveOk:gameLogic.isMoveOk,updateUI:n}),document.addEventListener("animationend",k,!1),document.addEventListener("webkitAnimationEnd",k,!1),document.addEventListener("oanimationend",k,!1),dragAndDropService.addDragListener("gameArea",d)}function k(){$rootScope.$apply(function(){log.info("Animation ended"),t=!0,v&&m()})}function l(){var a=aiService.createComputerMove(x.board,1);return console.log("created computer move"),console.log(a[1].set.value),"hi"}function m(){console.log("turn index for computer "+B),gameService.makeMove(aiService.createComputerMove(x.board,B))}function n(a){t=!1,w=a,x=a.stateAfterMove,x.board||(x.board=gameLogic.getInitialBoard()),u=a.turnIndexAfterMove>=0&&a.yourPlayerIndex===a.turnIndexAfterMove,console.log("your player index "+a.yourPlayerIndex),B=a.turnIndexAfterMove,v=u&&""===a.playersInfo[a.yourPlayerIndex].playerId,console.log("is the computer working? "+v),v&&(u=!1,m())}function o(a,b){x.board[a][b]?y="D"===x.board[a][b].charAt(0)?+x.board[a][b].charAt(1):4:console.log("You clicked on an empty space!!")}function p(a,b){var c=x.board[a][b];return""!==c}function q(a,b){return"X"===x.board[a][b]}function r(a,b){return"O"===x.board[a][b]}function s(a,b){return!t&&x.delta&&x.delta.row===a&&x.delta.col===b}var t=!1,u=!1,v=!1,w=null,x=null;a.isHelpModalShown=!1;var y,z,A,B=null,C={row:-1,col:-1},D={row:-1,col:-1};a.getSource=b,a.printBoard=c,a.handleDragEvent=d,a.getId=g,a.getArray=h,a.getColumn=i,a.init=j,a.computer=l,a.getPawnId=o,a.shouldShowImage=p,a.isPieceX=q,a.isPieceO=r,a.shouldSlowlyAppear=s}(game||(game={})),angular.module("myApp",["ngTouch","ui.bootstrap","gameServices"]).run([function(){$rootScope.game=game,translate.setLanguage("en",{RULES_OF_HARE_AND_HOUNDS:"Rules of Hare and Hounds",RULES_SLIDE1:"Hare is trying to avoid the hounds and reach the other side of the board, while the hounds try to block it",RULES_SLIDE2:"All pieces can be moved one space. Hounds can not move backwards while the hare can move anywhere it wants",CLOSE:"Close"}),game.init()}]);var aiService;!function(a){function b(a,b){console.log("ai has been summoned"),void 0===a&&(a=gameLogic.getInitialBoard());var c,d,e=3;if(0===b){var f=gameLogic.getDogPositions(a);for(e=Math.floor(3*Math.random()),console.log(" dog selected to be moved "+e);1===f[e].row&&4===f[e].col;)e=Math.floor(3*Math.random());console.log(" dog selected to be move after check "+e);var g=f[e].row,h=f[e].col;c=gameLogic.legalMovesDog[g][h];for(var i;void 0===d;){console.log("mpika"),i=c[Math.floor(Math.random()*c.length)],console.log(" move created by random "+i[0]+" "+i[1]);try{d=gameLogic.createMove(a,{row:g,col:h},{row:i[0],col:i[1]},b)}catch(j){}for(e=Math.floor(3*Math.random());1===f[e].row&&4===f[e].col;)e=Math.floor(3*Math.random());g=f[e].row,h=f[e].col,c=gameLogic.legalMovesDog[g][h]}return d}var k=gameLogic.getBunnyPosition(a);c=gameLogic.legalMovesBunny[k.row][k.col];for(var l;void 0===d;){l=c[Math.floor(Math.random()*c.length)],console.log(" move created by random "+l[0]+" "+l[1]);try{d=gameLogic.createMove(a,{row:k.row,col:k.col},{row:l[0],col:l[1]},b)}catch(j){console.log(j)}}return d}function c(b){a.dogId=b}a.createComputerMove=b,a.setDogId=c}(aiService||(aiService={}));
//# sourceMappingURL=everything.min.js.map