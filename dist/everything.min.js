var gameLogic;!function(a){function b(){a.bunnyPosition.line=1,a.bunnyPosition.column=4,a.dogPosition[0].line=0,a.dogPosition[0].column=0,a.dogPosition[1].line=1,a.dogPosition[1].column=0,a.dogPosition[2].line=2,a.dogPosition[2].column=0}function c(){this.turnsTake++}function d(){return b(),[["D1","",""],["D2","","","","B"],["D3","",""]]}function e(a){return"B"==a[1][4]&&"D"==a[0][2].charAt(0)&&"D"==a[1][3].charAt(0)&&"D"==a[2][2].charAt(0)||"B"==a[0][1]&&"D"==a[0][0].charAt(0)&&"D"==a[1][2].charAt(0)&&"D"==a[0][2].charAt(0)||"B"==a[2][1]&&"D"==a[2][0].charAt(0)&&"D"==a[1][2].charAt(0)&&"D"==a[2][2].charAt(0)?!0:!1}function f(a,b){if(null==a||null==b)return!1;if(a.length!==b.length)return!1;for(var c=a.length;c--;)if(a[c]!==b[c])return!1;return!0}function g(a){for(var b=a.slice(0),c=a.length;c--;)b[c]instanceof Array&&(b[c]=g(a[c]));return b}function h(b,c,e,h,j){var k=[e,h];if(console.log(" creating move to row "+e+" and col "+h),console.log("and id is "+c),b||(b=d()),0>h)throw new Error("Column value cannot be lower than 0");if(0>e)throw new Error("Row value cannot be lower than 0");if(e>2)throw new Error("Row value cannot be higher than 2");if(1==e&&h>4)throw new Error("Column value is too high");if((0===e||2===e)&&h>2)throw new Error("Column value is too high");if(""!==b[e][h])throw new Error("One can only make a move in an empty position!");if(""!==i(b))throw new Error("Can only make a move if the game is not over!");if(1===j){for(var l=!1,m=0;m<a.legalMovesBunny[a.bunnyPosition.line][a.bunnyPosition.column].length;m++)f(k,a.legalMovesBunny[a.bunnyPosition.line][a.bunnyPosition.column][m])&&(l=!0);if(!l)throw new Error("Cannot move there bunny!")}else{var n;n=1==c?0:2==c?1:2;for(var o=!1,m=0;m<a.legalMovesDog[a.dogPosition[n].line][a.dogPosition[n].column].length;m++)f(k,a.legalMovesDog[a.dogPosition[n].line][a.dogPosition[n].column][m])&&(o=!0);if(!o)throw new Error("Cannot move there dog!")}var p=g(b);1===j?(p[a.bunnyPosition.line][a.bunnyPosition.column]="",p[e][h]="B",a.bunnyPosition.line=e,a.bunnyPosition.column=h):(p[a.dogPosition[c-1].line][a.dogPosition[c-1].column]="",p[e][h]="D"+c,a.dogPosition[c-1].line=e,a.dogPosition[c-1].column=h);var q,r=i(p);q=""!==r?{endMatch:{endMatchScores:"D"===r?[1,0]:"B"===r?[0,1]:[0,0]}}:{setTurn:{turnIndex:1-j}};var s={row:e,col:h};return[q,{set:{key:"board",value:p}},{set:{key:"delta",value:s}}]}function i(b){return a.bunnyPosition.column<=a.dogPosition[0].column&&a.bunnyPosition.column<=a.dogPosition[1].column&&a.bunnyPosition.column<=a.dogPosition[2].column?"B":20===a.turnsTake?"B":e(b)?"D":""}function j(){return!0}a.legalMovesDog=[[[[0,1],[1,1],[1,2]],[[0,2],[1,2]],[[1,3],[1,4]]],[[[0,0],[1,1],[2,0]],[[0,0],[1,2],[2,0]],[[0,1],[2,1],[0,2],[1,3],[2,2]],[[0,2],[2,2],[1,4]],[]],[[[1,1],[1,2],[2,1]],[[1,2],[2,2]],[[1,3],[1,4]]]],a.legalMovesBunny=[[[[1,0],[0,1],[1,1],[1,2]],[[0,0],[0,2],[1,2]],[[0,1],[1,2],[1,3],[1,4]]],[[],[[1,0],[0,0],[1,2],[2,0]],[[2,1],[1,1],[0,1],[2,1],[0,2],[1,3],[2,2]],[[1,2],[0,2],[2,2],[1,4]],[[0,2],[1,3],[2,2]]],[[[1,0],[1,1],[1,2],[2,1]],[[2,0],[1,2],[2,2]],[[2,1],[1,3],[1,4]]]],a.bunnyPosition={line:0,column:0},a.dogPosition=[{line:0,column:0},{line:0,column:0},{line:0,column:0}],a.setInitialPositions=b,a.turnsTake=0,a.incrementTurn=c,a.getInitialBoard=d,a.bunnyBlocked=e,a.arraysEqual=f,a.createMove=h,a.getWinner=i,a.isMoveOk=j}(gameLogic||(gameLogic={}));var game;!function(a){function b(){console.log(this.testString)}function c(){for(var a=0;a<w.board.length;a++)for(var b=0;b<w.board[a].length;b++)console.log(w.board[a][b])}function d(b,c,d){z=document.getElementById("gameArea");var h=c-z.offsetLeft,i=d-z.offsetTop;console.log(" client offset left is "+z.offsetLeft),console.log(" client offset top is "+z.offsetTop);var j=Math.floor(5*h/z.clientWidth),k=Math.floor(3*i/z.clientHeight);(0===k||2===k)&&(j-=1);f();if("touchstart"===b&&B.row<0&&B.col<0){var l=w.board[k][j];l&&(B={row:k,col:j},g(k,j),y=document.getElementById(a.pawnTag),y&&(y.style.width="115%",y.style.height="115%",y.style.position="absolute"))}("touchend"===b||"touchcancel"===b||"touchleave"===b||"mouseup"===b)&&(0===k&&2===k&&(j-=1),C={row:k,col:j},console.log("delta to "+C.row+" and delta col is "+C.col),e(B,C)),("touchend"===b||"touchcancel"===b||"touchleave"===b||"mouseup"===b)&&(y.style.width="100%",y.style.height="100%",y.style.position="absolute",B={row:-1,col:-1},C={row:-1,col:-1},y=null)}function e(a,b){var c="Dragged piece from "+a.row+"*"+a.col+" to "+b.row+"*"+b.col;if(log.info(c),"?throwException"===window.location.search)throw new Error("Throwing the error because URL has '?throwException'");if(t)try{n(a.row,a.col);var d=gameLogic.createMove(w.board,x,b.row,b.col,v.turnIndexAfterMove);t=!1,gameService.makeMove(d),log.info(["Make movement from "+a.row+"x"+a.col+" to "+b.row+"x"+b.col])}catch(e){return void log.info(e)}}function f(){var a={width:z.clientWidth/5,height:z.clientHeight/3};return a}function g(b,c){return w.board[b][c]?(a.pawnTag=w.board[b][c].charAt(0),"D"===a.pawnTag&&(a.pawnTag=w.board[b][c].charAt(1)),!0):!1}function h(a){return 1===a?[0,1,2,3,4]:[0,1,2]}function i(a,b){return 1===a?b:b+1}function j(){console.log("Translation of 'RULES_OF_HARE_AND_HOUNDS' is "+translate("RULES_OF_HARE_AND_HOUNDS")),resizeGameAreaService.setWidthToHeight(1),gameService.setGame({minNumberOfPlayers:2,maxNumberOfPlayers:2,isMoveOk:gameLogic.isMoveOk,updateUI:m}),document.addEventListener("animationend",k,!1),document.addEventListener("webkitAnimationEnd",k,!1),document.addEventListener("oanimationend",k,!1),dragAndDropService.addDragListener("gameArea",d)}function k(){$rootScope.$apply(function(){log.info("Animation ended"),s=!0,u&&l()})}function l(){gameService.makeMove(aiService.createComputerMove(w.board,A))}function m(a){s=!1,v=a,w=a.stateAfterMove,w.board||(w.board=gameLogic.getInitialBoard()),t=a.turnIndexAfterMove>=0&&a.yourPlayerIndex===a.turnIndexAfterMove,console.log("your player index "+a.yourPlayerIndex),A=a.turnIndexAfterMove,console.log("is the computer working? "+u),u=t&&""===a.playersInfo[a.yourPlayerIndex].playerId,u&&(t=!1,w.delta||l())}function n(a,b){w.board[a][b]?x="D"===w.board[a][b].charAt(0)?+w.board[a][b].charAt(1):4:console.log("You clicked on an empty space!!")}function o(a,b){var c=w.board[a][b];return""!==c}function p(a,b){return"X"===w.board[a][b]}function q(a,b){return"O"===w.board[a][b]}function r(a,b){return!s&&w.delta&&w.delta.row===a&&w.delta.col===b}a.testString="hello";var s=!1,t=!1,u=!1,v=null,w=null;a.isHelpModalShown=!1;var x,y,z,A=null,B={row:-1,col:-1},C={row:-1,col:-1};a.sayHello=b,a.printBoard=c,a.handleDragEvent=d,a.getId=g,a.getArray=h,a.getColumn=i,a.init=j,a.getPawnId=n,a.shouldShowImage=o,a.isPieceX=p,a.isPieceO=q,a.shouldSlowlyAppear=r}(game||(game={})),angular.module("myApp",["ngTouch","ui.bootstrap","gameServices"]).run([function(){$rootScope.game=game,translate.setLanguage("en",{RULES_OF_HARE_AND_HOUNDS:"Rules of Hare and Hounds",RULES_SLIDE1:"Hare is trying to avoid the hounds and reach the other side of the board, while the hounds try to block it",RULES_SLIDE2:"All pieces can be moved one space. Hounds can not move backwards while the hare can move anywhere it wants",CLOSE:"Close"}),game.init()}]);var aiService;!function(a){function b(b){a.dogId=b}function c(a,c){var d,e,f=4;if(0===c){f=Math.floor(3*Math.random()),b(f+1),d=gameLogic.legalMovesDog[gameLogic.dogPosition[f].line][gameLogic.dogPosition[f].column];for(var g=d[Math.floor(Math.random()*d.length)];void 0===e;){console.log("mpika"),g=d[Math.floor(Math.random()*d.length)];try{e=gameLogic.createMove(a,f+1,g[0],g[1],c)}catch(h){}}return e}d=gameLogic.legalMovesBunny[gameLogic.bunnyPosition.line][gameLogic.bunnyPosition.column];for(var i;void 0===e;){i=d[Math.floor(Math.random()*d.length)];try{e=gameLogic.createMove(a,f,i[0],i[1],c)}catch(h){}}return e}a.setDogId=b,a.createComputerMove=c}(aiService||(aiService={}));
//# sourceMappingURL=everything.min.js.map